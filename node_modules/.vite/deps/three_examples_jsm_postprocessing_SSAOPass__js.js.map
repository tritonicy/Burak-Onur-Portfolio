{
  "version": 3,
  "sources": ["../../three/examples/jsm/math/SimplexNoise.js", "../../three/examples/jsm/shaders/SSAOShader.js", "../../three/examples/jsm/postprocessing/SSAOPass.js"],
  "sourcesContent": ["// Ported from Stefan Gustavson's java implementation\r\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\r\n// Read Stefan's excellent paper for details on how this code works.\r\n//\r\n// Sean McCullough banksean@gmail.com\r\n//\r\n// Added 4D noise\r\n\r\n/**\r\n * You can pass in a random number generator object if you like.\r\n * It is assumed to have a random() method.\r\n */\r\nclass SimplexNoise {\r\n\r\n\tconstructor( r = Math ) {\r\n\r\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\r\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\r\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\r\n\r\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\r\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\r\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\r\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\r\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\r\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\r\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\r\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\r\n\r\n\t\tthis.p = [];\r\n\r\n\t\tfor ( let i = 0; i < 256; i ++ ) {\r\n\r\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\r\n\r\n\t\t}\r\n\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.perm = [];\r\n\r\n\t\tfor ( let i = 0; i < 512; i ++ ) {\r\n\r\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\r\n\r\n\t\t}\r\n\r\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\r\n\t\t// Details can be found where this table is used, in the 4D noise method.\r\n\t\tthis.simplex = [\r\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\r\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\r\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\r\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\r\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\r\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\r\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\r\n\r\n\t}\r\n\r\n\tdot( g, x, y ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\r\n\r\n\t}\r\n\r\n\tdot3( g, x, y, z ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\r\n\r\n\t}\r\n\r\n\tdot4( g, x, y, z, w ) {\r\n\r\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\r\n\r\n\t}\r\n\r\n\tnoise( xin, yin ) {\r\n\r\n\t\tlet n0; // Noise contributions from the three corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\t// Skew the input space to determine which simplex cell we're in\r\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\r\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\r\n\t\tconst i = Math.floor( xin + s );\r\n\t\tconst j = Math.floor( yin + s );\r\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\r\n\t\tconst t = ( i + j ) * G2;\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\r\n\t\tconst y0 = yin - Y0;\r\n\r\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\r\n\t\t// Determine which simplex we are in.\r\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n\r\n\t\tlet j1;\r\n\t\tif ( x0 > y0 ) {\r\n\r\n\t\t\ti1 = 1; j1 = 0;\r\n\r\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n\r\n\t\t}\telse {\r\n\r\n\t\t\ti1 = 0; j1 = 1;\r\n\r\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n\r\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n\t\t// c = (3-sqrt(3))/6\r\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n\t\tconst y1 = y0 - j1 + G2;\r\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\r\n\t\t// Work out the hashed gradient indices of the three simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\r\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\r\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\r\n\t\t// Calculate the contribution from the three corners\r\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\r\n\r\n\t\t}\r\n\r\n\t\t// Add contributions from each corner to get the final noise value.\r\n\t\t// The result is scaled to return values in the interval [-1,1].\r\n\t\treturn 70.0 * ( n0 + n1 + n2 );\r\n\r\n\t}\r\n\r\n\t// 3D simplex noise\r\n\tnoise3d( xin, yin, zin ) {\r\n\r\n\t\tlet n0; // Noise contributions from the four corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\tlet n3;\r\n\t\t// Skew the input space to determine which simplex cell we're in\r\n\t\tconst F3 = 1.0 / 3.0;\r\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\r\n\t\tconst i = Math.floor( xin + s );\r\n\t\tconst j = Math.floor( yin + s );\r\n\t\tconst k = Math.floor( zin + s );\r\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\r\n\t\tconst t = ( i + j + k ) * G3;\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst Z0 = k - t;\r\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\r\n\t\tconst y0 = yin - Y0;\r\n\t\tconst z0 = zin - Z0;\r\n\r\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n\t\t// Determine which simplex we are in.\r\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\r\n\r\n\t\tlet j1;\r\n\t\tlet k1;\r\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\r\n\t\tlet j2;\r\n\t\tlet k2;\r\n\t\tif ( x0 >= y0 ) {\r\n\r\n\t\t\tif ( y0 >= z0 ) {\r\n\r\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t\t// X Y Z order\r\n\r\n\t\t\t} else if ( x0 >= z0 ) {\r\n\r\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t\t// X Z Y order\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\r\n\r\n\t\t\t} // Z X Y order\r\n\r\n\t\t} else { // x0<y0\r\n\r\n\t\t\tif ( y0 < z0 ) {\r\n\r\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t\t// Z Y X order\r\n\r\n\t\t\t} else if ( x0 < z0 ) {\r\n\r\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\r\n\r\n\t\t\t\t// Y Z X order\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n\r\n\t\t\t} // Y X Z order\r\n\r\n\t\t}\r\n\r\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n\t\t// c = 1/6.\r\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\r\n\t\tconst y1 = y0 - j1 + G3;\r\n\t\tconst z1 = z0 - k1 + G3;\r\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\r\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\r\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\r\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\r\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\r\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\r\n\t\t// Work out the hashed gradient indices of the four simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst kk = k & 255;\r\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\r\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\r\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\r\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\r\n\t\t// Calculate the contribution from the four corners\r\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n\t\tif ( t3 < 0 ) n3 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt3 *= t3;\r\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\r\n\r\n\t\t}\r\n\r\n\t\t// Add contributions from each corner to get the final noise value.\r\n\t\t// The result is scaled to stay just inside [-1,1]\r\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\r\n\r\n\t}\r\n\r\n\t// 4D simplex noise\r\n\tnoise4d( x, y, z, w ) {\r\n\r\n\t\t// For faster and easier lookups\r\n\t\tconst grad4 = this.grad4;\r\n\t\tconst simplex = this.simplex;\r\n\t\tconst perm = this.perm;\r\n\r\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\r\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\r\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\r\n\t\tlet n0; // Noise contributions from the five corners\r\n\t\tlet n1;\r\n\t\tlet n2;\r\n\t\tlet n3;\r\n\t\tlet n4;\r\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\r\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\r\n\t\tconst i = Math.floor( x + s );\r\n\t\tconst j = Math.floor( y + s );\r\n\t\tconst k = Math.floor( z + s );\r\n\t\tconst l = Math.floor( w + s );\r\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\r\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\r\n\t\tconst Y0 = j - t;\r\n\t\tconst Z0 = k - t;\r\n\t\tconst W0 = l - t;\r\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\r\n\t\tconst y0 = y - Y0;\r\n\t\tconst z0 = z - Z0;\r\n\t\tconst w0 = w - W0;\r\n\r\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\r\n\t\t// To find out which of the 24 possible simplices we're in, we need to\r\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\r\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\r\n\t\t// then find the correct traversal order for the simplex we’re in.\r\n\t\t// First, six pair-wise comparisons are performed between each possible pair\r\n\t\t// of the four coordinates, and the results are used to add up binary bits\r\n\t\t// for an integer index.\r\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\r\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\r\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\r\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\r\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\r\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\r\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\r\n\r\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\r\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\r\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\r\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\r\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\r\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\r\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\r\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\r\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\r\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\r\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\r\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\r\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\r\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\r\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\r\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\r\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\r\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\r\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\r\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\r\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\r\n\t\tconst y1 = y0 - j1 + G4;\r\n\t\tconst z1 = z0 - k1 + G4;\r\n\t\tconst w1 = w0 - l1 + G4;\r\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\r\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\r\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\r\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\r\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\r\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\r\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\r\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\r\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\r\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\r\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\r\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\r\n\t\t// Work out the hashed gradient indices of the five simplex corners\r\n\t\tconst ii = i & 255;\r\n\t\tconst jj = j & 255;\r\n\t\tconst kk = k & 255;\r\n\t\tconst ll = l & 255;\r\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\r\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\r\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\r\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\r\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\r\n\t\t// Calculate the contribution from the five corners\r\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\r\n\t\tif ( t0 < 0 ) n0 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt0 *= t0;\r\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\r\n\t\tif ( t1 < 0 ) n1 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt1 *= t1;\r\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\r\n\t\tif ( t2 < 0 ) n2 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt2 *= t2;\r\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\r\n\t\tif ( t3 < 0 ) n3 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt3 *= t3;\r\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\r\n\r\n\t\t}\r\n\r\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\r\n\t\tif ( t4 < 0 ) n4 = 0.0;\r\n\t\telse {\r\n\r\n\t\t\tt4 *= t4;\r\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\r\n\r\n\t\t}\r\n\r\n\t\t// Sum up and scale the result to cover the range [-1,1]\r\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SimplexNoise };\r\n", "import {\r\n\tMatrix4,\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * References:\r\n * http://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html\r\n * https://learnopengl.com/Advanced-Lighting/SSAO\r\n * https://github.com/McNopper/OpenGL/blob/master/Example28/shader/ssao.frag.glsl\r\n */\r\n\r\nconst SSAOShader = {\r\n\r\n\tname: 'SSAOShader',\r\n\r\n\tdefines: {\r\n\t\t'PERSPECTIVE_CAMERA': 1,\r\n\t\t'KERNEL_SIZE': 32\r\n\t},\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tNormal': { value: null },\r\n\t\t'tDepth': { value: null },\r\n\t\t'tNoise': { value: null },\r\n\t\t'kernel': { value: null },\r\n\t\t'cameraNear': { value: null },\r\n\t\t'cameraFar': { value: null },\r\n\t\t'resolution': { value: new Vector2() },\r\n\t\t'cameraProjectionMatrix': { value: new Matrix4() },\r\n\t\t'cameraInverseProjectionMatrix': { value: new Matrix4() },\r\n\t\t'kernelRadius': { value: 8 },\r\n\t\t'minDistance': { value: 0.005 },\r\n\t\t'maxDistance': { value: 0.05 },\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\t\tuniform highp sampler2D tNormal;\r\n\t\tuniform highp sampler2D tDepth;\r\n\t\tuniform sampler2D tNoise;\r\n\r\n\t\tuniform vec3 kernel[ KERNEL_SIZE ];\r\n\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tuniform float cameraNear;\r\n\t\tuniform float cameraFar;\r\n\t\tuniform mat4 cameraProjectionMatrix;\r\n\t\tuniform mat4 cameraInverseProjectionMatrix;\r\n\r\n\t\tuniform float kernelRadius;\r\n\t\tuniform float minDistance; // avoid artifacts caused by neighbour fragments with minimal depth difference\r\n\t\tuniform float maxDistance; // avoid the influence of fragments which are too far away\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#include <packing>\r\n\r\n\t\tfloat getDepth( const in vec2 screenPosition ) {\r\n\r\n\t\t\treturn texture2D( tDepth, screenPosition ).x;\r\n\r\n\t\t}\r\n\r\n\t\tfloat getLinearDepth( const in vec2 screenPosition ) {\r\n\r\n\t\t\t#if PERSPECTIVE_CAMERA == 1\r\n\r\n\t\t\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\r\n\t\t\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\r\n\t\t\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\treturn texture2D( tDepth, screenPosition ).x;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t\tfloat getViewZ( const in float depth ) {\r\n\r\n\t\t\t#if PERSPECTIVE_CAMERA == 1\r\n\r\n\t\t\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t\tvec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\r\n\r\n\t\t\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\r\n\r\n\t\t\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\r\n\r\n\t\t\tclipPosition *= clipW; // unprojection.\r\n\r\n\t\t\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\r\n\r\n\t\t}\r\n\r\n\t\tvec3 getViewNormal( const in vec2 screenPosition ) {\r\n\r\n\t\t\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tfloat depth = getDepth( vUv );\r\n\r\n\t\t\tif ( depth == 1.0 ) {\r\n\r\n\t\t\t\tgl_FragColor = vec4( 1.0 ); // don't influence background\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloat viewZ = getViewZ( depth );\r\n\r\n\t\t\t\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\r\n\t\t\t\tvec3 viewNormal = getViewNormal( vUv );\r\n\r\n\t\t\t\tvec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\r\n\t\t\t\tvec3 random = vec3( texture2D( tNoise, vUv * noiseScale ).r );\r\n\r\n\t\t\t\t// compute matrix used to reorient a kernel vector\r\n\r\n\t\t\t\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\r\n\t\t\t\tvec3 bitangent = cross( viewNormal, tangent );\r\n\t\t\t\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\r\n\r\n\t\t\t\tfloat occlusion = 0.0;\r\n\r\n\t\t\t\tfor ( int i = 0; i < KERNEL_SIZE; i ++ ) {\r\n\r\n\t\t\t\t\tvec3 sampleVector = kernelMatrix * kernel[ i ]; // reorient sample vector in view space\r\n\t\t\t\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius ); // calculate sample point\r\n\r\n\t\t\t\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 ); // project point and calculate NDC\r\n\t\t\t\t\tsamplePointNDC /= samplePointNDC.w;\r\n\r\n\t\t\t\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5; // compute uv coordinates\r\n\r\n\t\t\t\t\tfloat realDepth = getLinearDepth( samplePointUv ); // get linear depth from depth texture\r\n\t\t\t\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar ); // compute linear depth of the sample view Z value\r\n\t\t\t\t\tfloat delta = sampleDepth - realDepth;\r\n\r\n\t\t\t\t\tif ( delta > minDistance && delta < maxDistance ) { // if fragment is before sample point, increase occlusion\r\n\r\n\t\t\t\t\t\tocclusion += 1.0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\r\n\r\n\t\t\t\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nconst SSAODepthShader = {\r\n\r\n\tname: 'SSAODepthShader',\r\n\r\n\tdefines: {\r\n\t\t'PERSPECTIVE_CAMERA': 1\r\n\t},\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDepth': { value: null },\r\n\t\t'cameraNear': { value: null },\r\n\t\t'cameraFar': { value: null },\r\n\r\n\t},\r\n\r\n\tvertexShader:\r\n\r\n\t\t`varying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader:\r\n\r\n\t\t`uniform sampler2D tDepth;\r\n\r\n\t\tuniform float cameraNear;\r\n\t\tuniform float cameraFar;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#include <packing>\r\n\r\n\t\tfloat getLinearDepth( const in vec2 screenPosition ) {\r\n\r\n\t\t\t#if PERSPECTIVE_CAMERA == 1\r\n\r\n\t\t\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\r\n\t\t\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\r\n\t\t\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\treturn texture2D( tDepth, screenPosition ).x;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tfloat depth = getLinearDepth( vUv );\r\n\t\t\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nconst SSAOBlurShader = {\r\n\r\n\tname: 'SSAOBlurShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'resolution': { value: new Vector2() }\r\n\r\n\t},\r\n\r\n\tvertexShader:\r\n\r\n\t\t`varying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader:\r\n\r\n\t\t`uniform sampler2D tDiffuse;\r\n\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec2 texelSize = ( 1.0 / resolution );\r\n\t\t\tfloat result = 0.0;\r\n\r\n\t\t\tfor ( int i = - 2; i <= 2; i ++ ) {\r\n\r\n\t\t\t\tfor ( int j = - 2; j <= 2; j ++ ) {\r\n\r\n\t\t\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\r\n\t\t\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { SSAOShader, SSAODepthShader, SSAOBlurShader };\r\n", "import {\r\n\tAddEquation,\r\n\tColor,\r\n\tCustomBlending,\r\n\tDataTexture,\r\n\tDepthTexture,\r\n\tDstAlphaFactor,\r\n\tDstColorFactor,\r\n\tFloatType,\r\n\tHalfFloatType,\r\n\tMathUtils,\r\n\tMeshNormalMaterial,\r\n\tNearestFilter,\r\n\tNoBlending,\r\n\tRedFormat,\r\n\tDepthStencilFormat,\r\n\tUnsignedInt248Type,\r\n\tRepeatWrapping,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector3,\r\n\tWebGLRenderTarget,\r\n\tZeroFactor\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { SimplexNoise } from '../math/SimplexNoise.js';\r\nimport { SSAOShader } from '../shaders/SSAOShader.js';\r\nimport { SSAOBlurShader } from '../shaders/SSAOShader.js';\r\nimport { SSAODepthShader } from '../shaders/SSAOShader.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\n\r\nclass SSAOPass extends Pass {\r\n\r\n\tconstructor( scene, camera, width, height, kernelSize = 32 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.width = ( width !== undefined ) ? width : 512;\r\n\t\tthis.height = ( height !== undefined ) ? height : 512;\r\n\r\n\t\tthis.clear = true;\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.camera = camera;\r\n\t\tthis.scene = scene;\r\n\r\n\t\tthis.kernelRadius = 8;\r\n\t\tthis.kernel = [];\r\n\t\tthis.noiseTexture = null;\r\n\t\tthis.output = 0;\r\n\r\n\t\tthis.minDistance = 0.005;\r\n\t\tthis.maxDistance = 0.1;\r\n\r\n\t\tthis._visibilityCache = new Map();\r\n\r\n\t\t//\r\n\r\n\t\tthis.generateSampleKernel( kernelSize );\r\n\t\tthis.generateRandomKernelRotations();\r\n\r\n\t\t// depth texture\r\n\r\n\t\tconst depthTexture = new DepthTexture();\r\n\t\tdepthTexture.format = DepthStencilFormat;\r\n\t\tdepthTexture.type = UnsignedInt248Type;\r\n\r\n\t\t// normal render target with depth buffer\r\n\r\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\ttype: HalfFloatType,\r\n\t\t\tdepthTexture: depthTexture\r\n\t\t} );\r\n\r\n\t\t// ssao render target\r\n\r\n\t\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\r\n\r\n\t\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\r\n\r\n\t\t// ssao material\r\n\r\n\t\tthis.ssaoMaterial = new ShaderMaterial( {\r\n\t\t\tdefines: Object.assign( {}, SSAOShader.defines ),\r\n\t\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\r\n\t\t\tvertexShader: SSAOShader.vertexShader,\r\n\t\t\tfragmentShader: SSAOShader.fragmentShader,\r\n\t\t\tblending: NoBlending\r\n\t\t} );\r\n\r\n\t\tthis.ssaoMaterial.defines[ 'KERNEL_SIZE' ] = kernelSize;\r\n\r\n\t\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\r\n\t\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\r\n\t\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\r\n\t\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\t// normal material\r\n\r\n\t\tthis.normalMaterial = new MeshNormalMaterial();\r\n\t\tthis.normalMaterial.blending = NoBlending;\r\n\r\n\t\t// blur material\r\n\r\n\t\tthis.blurMaterial = new ShaderMaterial( {\r\n\t\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\r\n\t\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\r\n\t\t\tvertexShader: SSAOBlurShader.vertexShader,\r\n\t\t\tfragmentShader: SSAOBlurShader.fragmentShader\r\n\t\t} );\r\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\r\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\r\n\r\n\t\t// material for rendering the depth\r\n\r\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\r\n\t\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\r\n\t\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\r\n\t\t\tvertexShader: SSAODepthShader.vertexShader,\r\n\t\t\tfragmentShader: SSAODepthShader.fragmentShader,\r\n\t\t\tblending: NoBlending\r\n\t\t} );\r\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\r\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\r\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\r\n\r\n\t\t// material for rendering the content of a render target\r\n\r\n\t\tthis.copyMaterial = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\r\n\t\t\tvertexShader: CopyShader.vertexShader,\r\n\t\t\tfragmentShader: CopyShader.fragmentShader,\r\n\t\t\ttransparent: true,\r\n\t\t\tdepthTest: false,\r\n\t\t\tdepthWrite: false,\r\n\t\t\tblendSrc: DstColorFactor,\r\n\t\t\tblendDst: ZeroFactor,\r\n\t\t\tblendEquation: AddEquation,\r\n\t\t\tblendSrcAlpha: DstAlphaFactor,\r\n\t\t\tblendDstAlpha: ZeroFactor,\r\n\t\t\tblendEquationAlpha: AddEquation\r\n\t\t} );\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( null );\r\n\r\n\t\tthis.originalClearColor = new Color();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\t// dispose render targets\r\n\r\n\t\tthis.normalRenderTarget.dispose();\r\n\t\tthis.ssaoRenderTarget.dispose();\r\n\t\tthis.blurRenderTarget.dispose();\r\n\r\n\t\t// dispose materials\r\n\r\n\t\tthis.normalMaterial.dispose();\r\n\t\tthis.blurMaterial.dispose();\r\n\t\tthis.copyMaterial.dispose();\r\n\t\tthis.depthRenderMaterial.dispose();\r\n\r\n\t\t// dipsose full screen quad\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\r\n\r\n\t\tthis.overrideVisibility();\r\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\r\n\t\tthis.restoreVisibility();\r\n\r\n\t\t// render SSAO\r\n\r\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\r\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\r\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\r\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\r\n\r\n\t\t// render blur\r\n\r\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\r\n\r\n\t\t// output result to screen\r\n\r\n\t\tswitch ( this.output ) {\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Blur:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Depth:\r\n\r\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Normal:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SSAOPass.OUTPUT.Default:\r\n\r\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\r\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\r\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\t// save original state\r\n\t\trenderer.getClearColor( this.originalClearColor );\r\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t// setup pass state\r\n\t\trenderer.autoClear = false;\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.material = passMaterial;\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// restore original state\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t}\r\n\r\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\r\n\r\n\t\trenderer.getClearColor( this.originalClearColor );\r\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\r\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\r\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\r\n\r\n\t\t\trenderer.setClearColor( clearColor );\r\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\r\n\t\t\trenderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = overrideMaterial;\r\n\t\trenderer.render( this.scene, this.camera );\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t\t// restore original state\r\n\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\trenderer.setClearColor( this.originalClearColor );\r\n\t\trenderer.setClearAlpha( originalClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.ssaoRenderTarget.setSize( width, height );\r\n\t\tthis.normalRenderTarget.setSize( width, height );\r\n\t\tthis.blurRenderTarget.setSize( width, height );\r\n\r\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\r\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\r\n\r\n\t}\r\n\r\n\tgenerateSampleKernel( kernelSize ) {\r\n\r\n\t\tconst kernel = this.kernel;\r\n\r\n\t\tfor ( let i = 0; i < kernelSize; i ++ ) {\r\n\r\n\t\t\tconst sample = new Vector3();\r\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\r\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\r\n\t\t\tsample.z = Math.random();\r\n\r\n\t\t\tsample.normalize();\r\n\r\n\t\t\tlet scale = i / kernelSize;\r\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\r\n\t\t\tsample.multiplyScalar( scale );\r\n\r\n\t\t\tkernel.push( sample );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateRandomKernelRotations() {\r\n\r\n\t\tconst width = 4, height = 4;\r\n\r\n\t\tconst simplex = new SimplexNoise();\r\n\r\n\t\tconst size = width * height;\r\n\t\tconst data = new Float32Array( size );\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\tconst x = ( Math.random() * 2 ) - 1;\r\n\t\t\tconst y = ( Math.random() * 2 ) - 1;\r\n\t\t\tconst z = 0;\r\n\r\n\t\t\tdata[ i ] = simplex.noise3d( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RedFormat, FloatType );\r\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\r\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\r\n\t\tthis.noiseTexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\toverrideVisibility() {\r\n\r\n\t\tconst scene = this.scene;\r\n\t\tconst cache = this._visibilityCache;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tcache.set( object, object.visible );\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\trestoreVisibility() {\r\n\r\n\t\tconst scene = this.scene;\r\n\t\tconst cache = this._visibilityCache;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tconst visible = cache.get( object );\r\n\t\t\tobject.visible = visible;\r\n\r\n\t\t} );\r\n\r\n\t\tcache.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nSSAOPass.OUTPUT = {\r\n\t'Default': 0,\r\n\t'SSAO': 1,\r\n\t'Blur': 2,\r\n\t'Depth': 3,\r\n\t'Normal': 4\r\n};\r\n\r\nexport { SSAOPass };\r\n"],
  "mappings": "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AAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAAG,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,MAC7H,CAAE,GAAG,GAAG,GAAG,CAAE;AAAA,M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",
  "names": []
}
