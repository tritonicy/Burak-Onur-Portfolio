{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/FXAAShader.js"],
  "sourcesContent": ["import {\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * NVIDIA FXAA by Timothy Lottes\r\n * https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf\r\n * - WebGL port by @supereggbert\r\n * http://www.glge.org/demos/fxaa/\r\n * Further improved by Daniel Sturk\r\n */\r\n\r\nconst FXAAShader = {\r\n\r\n\tname: 'FXAAShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\t\tprecision highp float;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\r\n\r\n\t\t//----------------------------------------------------------------------------------\r\n\t\t// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\r\n\t\t// SDK Version: v3.00\r\n\t\t// Email:       gameworks@nvidia.com\r\n\t\t// Site:        http://developer.nvidia.com/\r\n\t\t//\r\n\t\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\r\n\t\t//\r\n\t\t// Redistribution and use in source and binary forms, with or without\r\n\t\t// modification, are permitted provided that the following conditions\r\n\t\t// are met:\r\n\t\t//  * Redistributions of source code must retain the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer.\r\n\t\t//  * Redistributions in binary form must reproduce the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer in the\r\n\t\t//    documentation and/or other materials provided with the distribution.\r\n\t\t//  * Neither the name of NVIDIA CORPORATION nor the names of its\r\n\t\t//    contributors may be used to endorse or promote products derived\r\n\t\t//    from this software without specific prior written permission.\r\n\t\t//\r\n\t\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY\r\n\t\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n\t\t// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n\t\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n\t\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n\t\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n\t\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n\t\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\t\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n\t\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\t\t//\r\n\t\t//----------------------------------------------------------------------------------\r\n\r\n\t\t#ifndef FXAA_DISCARD\r\n\t\t\t//\r\n\t\t\t// Only valid for PC OpenGL currently.\r\n\t\t\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\r\n\t\t\t//\r\n\t\t\t// 1 = Use discard on pixels which don't need AA.\r\n\t\t\t//     For APIs which enable concurrent TEX+ROP from same surface.\r\n\t\t\t// 0 = Return unchanged color on pixels which don't need AA.\r\n\t\t\t//\r\n\t\t\t#define FXAA_DISCARD 0\r\n\t\t#endif\r\n\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#define FxaaTexTop(t, p) texture2D(t, p, -100.0)\r\n\t\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), -100.0)\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\r\n\t\t#define NUM_SAMPLES 5\r\n\r\n\t\t// assumes colors have premultipliedAlpha, so that the calculated color contrast is scaled by alpha\r\n\t\tfloat contrast( vec4 a, vec4 b ) {\r\n\t\t\tvec4 diff = abs( a - b );\r\n\t\t\treturn max( max( max( diff.r, diff.g ), diff.b ), diff.a );\r\n\t\t}\r\n\r\n\t\t/*============================================================================\r\n\r\n\t\t\t\t\t\t\t\t\tFXAA3 QUALITY - PC\r\n\r\n\t\t============================================================================*/\r\n\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\tvec4 FxaaPixelShader(\r\n\t\t\tvec2 posM,\r\n\t\t\tsampler2D tex,\r\n\t\t\tvec2 fxaaQualityRcpFrame,\r\n\t\t\tfloat fxaaQualityEdgeThreshold,\r\n\t\t\tfloat fxaaQualityinvEdgeThreshold\r\n\t\t) {\r\n\t\t\tvec4 rgbaM = FxaaTexTop(tex, posM);\r\n\t\t\tvec4 rgbaS = FxaaTexOff(tex, posM, vec2( 0.0, 1.0), fxaaQualityRcpFrame.xy);\r\n\t\t\tvec4 rgbaE = FxaaTexOff(tex, posM, vec2( 1.0, 0.0), fxaaQualityRcpFrame.xy);\r\n\t\t\tvec4 rgbaN = FxaaTexOff(tex, posM, vec2( 0.0,-1.0), fxaaQualityRcpFrame.xy);\r\n\t\t\tvec4 rgbaW = FxaaTexOff(tex, posM, vec2(-1.0, 0.0), fxaaQualityRcpFrame.xy);\r\n\t\t\t// . S .\r\n\t\t\t// W M E\r\n\t\t\t// . N .\r\n\r\n\t\t\tbool earlyExit = max( max( max(\r\n\t\t\t\t\tcontrast( rgbaM, rgbaN ),\r\n\t\t\t\t\tcontrast( rgbaM, rgbaS ) ),\r\n\t\t\t\t\tcontrast( rgbaM, rgbaE ) ),\r\n\t\t\t\t\tcontrast( rgbaM, rgbaW ) )\r\n\t\t\t\t\t< fxaaQualityEdgeThreshold;\r\n\t\t\t// . 0 .\r\n\t\t\t// 0 0 0\r\n\t\t\t// . 0 .\r\n\r\n\t\t\t#if (FXAA_DISCARD == 1)\r\n\t\t\t\tif(earlyExit) FxaaDiscard;\r\n\t\t\t#else\r\n\t\t\t\tif(earlyExit) return rgbaM;\r\n\t\t\t#endif\r\n\r\n\t\t\tfloat contrastN = contrast( rgbaM, rgbaN );\r\n\t\t\tfloat contrastS = contrast( rgbaM, rgbaS );\r\n\t\t\tfloat contrastE = contrast( rgbaM, rgbaE );\r\n\t\t\tfloat contrastW = contrast( rgbaM, rgbaW );\r\n\r\n\t\t\tfloat relativeVContrast = ( contrastN + contrastS ) - ( contrastE + contrastW );\r\n\t\t\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\r\n\r\n\t\t\tbool horzSpan = relativeVContrast > 0.;\r\n\t\t\t// . 1 .\r\n\t\t\t// 0 0 0\r\n\t\t\t// . 1 .\r\n\r\n\t\t\t// 45 deg edge detection and corners of objects, aka V/H contrast is too similar\r\n\t\t\tif( abs( relativeVContrast ) < .3 ) {\r\n\t\t\t\t// locate the edge\r\n\t\t\t\tvec2 dirToEdge;\r\n\t\t\t\tdirToEdge.x = contrastE > contrastW ? 1. : -1.;\r\n\t\t\t\tdirToEdge.y = contrastS > contrastN ? 1. : -1.;\r\n\t\t\t\t// . 2 .      . 1 .\r\n\t\t\t\t// 1 0 2  ~=  0 0 1\r\n\t\t\t\t// . 1 .      . 0 .\r\n\r\n\t\t\t\t// tap 2 pixels and see which ones are \"outside\" the edge, to\r\n\t\t\t\t// determine if the edge is vertical or horizontal\r\n\r\n\t\t\t\tvec4 rgbaAlongH = FxaaTexOff(tex, posM, vec2( dirToEdge.x, -dirToEdge.y ), fxaaQualityRcpFrame.xy);\r\n\t\t\t\tfloat matchAlongH = contrast( rgbaM, rgbaAlongH );\r\n\t\t\t\t// . 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 H\r\n\r\n\t\t\t\tvec4 rgbaAlongV = FxaaTexOff(tex, posM, vec2( -dirToEdge.x, dirToEdge.y ), fxaaQualityRcpFrame.xy);\r\n\t\t\t\tfloat matchAlongV = contrast( rgbaM, rgbaAlongV );\r\n\t\t\t\t// V 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 .\r\n\r\n\t\t\t\trelativeVContrast = matchAlongV - matchAlongH;\r\n\t\t\t\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\r\n\r\n\t\t\t\tif( abs( relativeVContrast ) < .3 ) { // 45 deg edge\r\n\t\t\t\t\t// 1 1 .\r\n\t\t\t\t\t// 0 0 1\r\n\t\t\t\t\t// . 0 1\r\n\r\n\t\t\t\t\t// do a simple blur\r\n\t\t\t\t\treturn mix(\r\n\t\t\t\t\t\trgbaM,\r\n\t\t\t\t\t\t(rgbaN + rgbaS + rgbaE + rgbaW) * .25,\r\n\t\t\t\t\t\t.4\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\thorzSpan = relativeVContrast > 0.;\r\n\t\t\t}\r\n\r\n\t\t\tif(!horzSpan) rgbaN = rgbaW;\r\n\t\t\tif(!horzSpan) rgbaS = rgbaE;\r\n\t\t\t// . 0 .      1\r\n\t\t\t// 1 0 1  ->  0\r\n\t\t\t// . 0 .      1\r\n\r\n\t\t\tbool pairN = contrast( rgbaM, rgbaN ) > contrast( rgbaM, rgbaS );\r\n\t\t\tif(!pairN) rgbaN = rgbaS;\r\n\r\n\t\t\tvec2 offNP;\r\n\t\t\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\r\n\t\t\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\r\n\r\n\t\t\tbool doneN = false;\r\n\t\t\tbool doneP = false;\r\n\r\n\t\t\tfloat nDist = 0.;\r\n\t\t\tfloat pDist = 0.;\r\n\r\n\t\t\tvec2 posN = posM;\r\n\t\t\tvec2 posP = posM;\r\n\r\n\t\t\tint iterationsUsedN = 0;\r\n\t\t\tint iterationsUsedP = 0;\r\n\t\t\tfor( int i = 0; i < NUM_SAMPLES; i++ ) {\r\n\r\n\t\t\t\tfloat increment = float(i + 1);\r\n\r\n\t\t\t\tif(!doneN) {\r\n\t\t\t\t\tnDist += increment;\r\n\t\t\t\t\tposN = posM + offNP * nDist;\r\n\t\t\t\t\tvec4 rgbaEndN = FxaaTexTop(tex, posN.xy);\r\n\t\t\t\t\tdoneN = contrast( rgbaEndN, rgbaM ) > contrast( rgbaEndN, rgbaN );\r\n\t\t\t\t\titerationsUsedN = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!doneP) {\r\n\t\t\t\t\tpDist += increment;\r\n\t\t\t\t\tposP = posM - offNP * pDist;\r\n\t\t\t\t\tvec4 rgbaEndP = FxaaTexTop(tex, posP.xy);\r\n\t\t\t\t\tdoneP = contrast( rgbaEndP, rgbaM ) > contrast( rgbaEndP, rgbaN );\r\n\t\t\t\t\titerationsUsedP = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(doneN || doneP) break;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( !doneP && !doneN ) return rgbaM; // failed to find end of edge\r\n\r\n\t\t\tfloat dist = min(\r\n\t\t\t\tdoneN ? float( iterationsUsedN ) / float( NUM_SAMPLES - 1 ) : 1.,\r\n\t\t\t\tdoneP ? float( iterationsUsedP ) / float( NUM_SAMPLES - 1 ) : 1.\r\n\t\t\t);\r\n\r\n\t\t\t// hacky way of reduces blurriness of mostly diagonal edges\r\n\t\t\t// but reduces AA quality\r\n\t\t\tdist = pow(dist, .5);\r\n\r\n\t\t\tdist = 1. - dist;\r\n\r\n\t\t\treturn mix(\r\n\t\t\t\trgbaM,\r\n\t\t\t\trgbaN,\r\n\t\t\t\tdist * .5\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\t\t\tconst float edgeDetectionQuality = .2;\r\n\t\t\tconst float invEdgeDetectionQuality = 1. / edgeDetectionQuality;\r\n\r\n\t\t\tgl_FragColor = FxaaPixelShader(\r\n\t\t\t\tvUv,\r\n\t\t\t\ttDiffuse,\r\n\t\t\t\tresolution,\r\n\t\t\t\tedgeDetectionQuality, // [0,1] contrast needed, otherwise early discard\r\n\t\t\t\tinvEdgeDetectionQuality\r\n\t\t\t);\r\n\r\n\t\t}\r\n\t`\r\n\r\n};\r\n\r\nexport { FXAAShader };\r\n"],
  "mappings": ";;;;;AAYA,IAAM,aAAa;AAAA,EAElB,MAAM;AAAA,EAEN,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,cAAc,EAAE,OAAO,IAAI,QAAS,IAAI,MAAM,IAAI,GAAI,EAAE;AAAA,EAEzD;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxyP3B;",
  "names": []
}
