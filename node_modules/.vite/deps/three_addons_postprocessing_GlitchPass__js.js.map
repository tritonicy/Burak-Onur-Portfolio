{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/DigitalGlitch.js", "../../three/examples/jsm/postprocessing/GlitchPass.js"],
  "sourcesContent": ["/**\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\n\r\nconst DigitalGlitch = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null }, //diffuse texture\r\n\t\t'tDisp': { value: null }, //displacement texture for digital glitch squares\r\n\t\t'byp': { value: 0 }, //apply the glitch ?\r\n\t\t'amount': { value: 0.08 },\r\n\t\t'angle': { value: 0.02 },\r\n\t\t'seed': { value: 0.02 },\r\n\t\t'seed_x': { value: 0.02 }, //-1,1\r\n\t\t'seed_y': { value: 0.02 }, //-1,1\r\n\t\t'distortion_x': { value: 0.5 },\r\n\t\t'distortion_y': { value: 0.6 },\r\n\t\t'col_s': { value: 0.05 }\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\t\tvoid main() {\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform int byp; //should we apply the glitch ?\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform sampler2D tDisp;\r\n\r\n\t\tuniform float amount;\r\n\t\tuniform float angle;\r\n\t\tuniform float seed;\r\n\t\tuniform float seed_x;\r\n\t\tuniform float seed_y;\r\n\t\tuniform float distortion_x;\r\n\t\tuniform float distortion_y;\r\n\t\tuniform float col_s;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\r\n\t\tfloat rand(vec2 co){\r\n\t\t\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\t\t\tif(byp<1) {\r\n\t\t\t\tvec2 p = vUv;\r\n\t\t\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\r\n\t\t\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\r\n\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\r\n\t\t\t\tfloat disp = texture2D(tDisp, p*seed*seed).r;\r\n\t\t\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\r\n\t\t\t\t\tif(seed_x>0.){\r\n\t\t\t\t\t\tp.y = 1. - (p.y + distortion_y);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tp.y = distortion_y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\r\n\t\t\t\t\tif(seed_y>0.){\r\n\t\t\t\t\t\tp.x=distortion_x;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tp.x = 1. - (p.x + distortion_x);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tp.x+=disp*seed_x*(seed/5.);\r\n\t\t\t\tp.y+=disp*seed_y*(seed/5.);\r\n\t\t\t\t//base from RGB shift shader\r\n\t\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\r\n\t\t\t\tvec4 cr = texture2D(tDiffuse, p + offset);\r\n\t\t\t\tvec4 cga = texture2D(tDiffuse, p);\r\n\t\t\t\tvec4 cb = texture2D(tDiffuse, p - offset);\r\n\t\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\r\n\t\t\t\t//add noise\r\n\t\t\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\r\n\t\t\t\tgl_FragColor = gl_FragColor+ snow;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgl_FragColor=texture2D (tDiffuse, vUv);\r\n\t\t\t}\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { DigitalGlitch };\r\n", "import {\r\n\tDataTexture,\r\n\tFloatType,\r\n\tMathUtils,\r\n\tRedFormat,\r\n\tShaderMaterial,\r\n\tUniformsUtils\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\r\n\r\nclass GlitchPass extends Pass {\r\n\r\n\tconstructor( dt_size = 64 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst shader = DigitalGlitch;\r\n\r\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\tthis.heightMap = this.generateHeightmap( dt_size );\r\n\r\n\t\tthis.uniforms[ 'tDisp' ].value = this.heightMap;\r\n\r\n\t\tthis.material = new ShaderMaterial( {\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t} );\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\r\n\r\n\t\tthis.goWild = false;\r\n\t\tthis.curF = 0;\r\n\t\tthis.generateTrigger();\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\r\n\r\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\r\n\t\tthis.uniforms[ 'byp' ].value = 0;\r\n\r\n\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\r\n\r\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\r\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\r\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\r\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\r\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\r\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\r\n\t\t\tthis.curF = 0;\r\n\t\t\tthis.generateTrigger();\r\n\r\n\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\r\n\r\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\r\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\r\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\r\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\r\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\r\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\r\n\r\n\t\t} else if ( this.goWild == false ) {\r\n\r\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\r\n\r\n\t\t}\r\n\r\n\t\tthis.curF ++;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\tif ( this.clear ) renderer.clear();\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateTrigger() {\r\n\r\n\t\tthis.randX = MathUtils.randInt( 120, 240 );\r\n\r\n\t}\r\n\r\n\tgenerateHeightmap( dt_size ) {\r\n\r\n\t\tconst data_arr = new Float32Array( dt_size * dt_size );\r\n\t\tconst length = dt_size * dt_size;\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\r\n\t\t\tdata_arr[ i ] = val;\r\n\r\n\t\t}\r\n\r\n\t\tconst texture = new DataTexture( data_arr, dt_size, dt_size, RedFormat, FloatType );\r\n\t\ttexture.needsUpdate = true;\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.material.dispose();\r\n\r\n\t\tthis.heightMap.dispose();\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { GlitchPass };\r\n"],
  "mappings": "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",
  "names": []
}
